#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//#define VERBOSE 1
#define DEBUG 1

/*
 6502 static recompiler
 2007-10-25 20:10-21:28 create 6502 tables
            22:52-00:09 disassembler, coloring
 2007-10-26 18:54-19:17 coloring, labels, recompiler
 2007-10-28 17:04-17:44 recompiler
            18:40-20:45 recompiler, special case BIT/SKP
			22:16-00:46 RTS_SWITCH
 */

//typedef char int8_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;

typedef unsigned char instr_t;
typedef unsigned char addmode_t;

enum {
	TYPE_UNKNOWN     = 0,
	TYPE_CODE        = 1,
	TYPE_CODE_TARGET = 2,
	TYPE_AFTER_JSR   = 4
};

enum {
	INSTR_ADC,
	INSTR_AND,
	INSTR_ASL,
	INSTR_BCC,
	INSTR_BCS,
	INSTR_BEQ,
	INSTR_BIT,
	INSTR_BMI,
	INSTR_BNE,
	INSTR_BPL,
	INSTR_BRK,
	INSTR_BVC,
	INSTR_BVS,
	INSTR_CLC,
	INSTR_CLD,
	INSTR_CLI,
	INSTR_CLV,
	INSTR_CMP,
	INSTR_CPX,
	INSTR_CPY,
	INSTR_DEC,
	INSTR_DEX,
	INSTR_DEY,
	INSTR_EOR,
	INSTR_INC,
	INSTR_INX,
	INSTR_INY,
	INSTR_JMP,
	INSTR_JSR,
	INSTR_LDA,
	INSTR_LDX,
	INSTR_LDY,
	INSTR_LSR,
	INSTR_NOP,
	INSTR_ORA,
	INSTR_PHA,
	INSTR_PHP,
	INSTR_PLA,
	INSTR_PLP,
	INSTR_ROL,
	INSTR_ROR,
	INSTR_RTI,
	INSTR_RTS,
	INSTR_SBC,
	INSTR_SEC,
	INSTR_SED,
	INSTR_SEI,
	INSTR_STA,
	INSTR_STX,
	INSTR_STY,
	INSTR_TAX,
	INSTR_TAY,
	INSTR_TSX,
	INSTR_TXA,
	INSTR_TXS,
	INSTR_TYA,
	INSTR_XXX	
};

enum {
	ADDMODE_ABS,
	ADDMODE_ABSX,
	ADDMODE_ABSY,
	ADDMODE_ACC,
	ADDMODE_BRA,
	ADDMODE_IMM,
	ADDMODE_IMPL,
	ADDMODE_IND,
	ADDMODE_INDX,
	ADDMODE_INDY,
	ADDMODE_ZP,
	ADDMODE_ZPX,
	ADDMODE_ZPY
};

unsigned char length[] = {
	[ADDMODE_ABS]	2,
	[ADDMODE_ABSX]	2,
	[ADDMODE_ABSY]	2,
	[ADDMODE_ACC]	0,
	[ADDMODE_BRA]	1,
	[ADDMODE_IMM]	1,
	[ADDMODE_IMPL]	0,
	[ADDMODE_IND]	2,
	[ADDMODE_INDX]	1,
	[ADDMODE_INDY]	1,
	[ADDMODE_ZP]	1,
	[ADDMODE_ZPX]	1,
	[ADDMODE_ZPY]	1
};

char* mnemo[] = {
	[INSTR_ADC] "ADC",
	[INSTR_AND] "AND",
	[INSTR_ASL] "ASL",
	[INSTR_BCC] "BCC",
	[INSTR_BCS] "BCS",
	[INSTR_BEQ] "BEQ",
	[INSTR_BIT] "BIT",
	[INSTR_BMI] "BMI",
	[INSTR_BNE] "BNE",
	[INSTR_BPL] "BPL",
	[INSTR_BRK] "BRK",
	[INSTR_BVC] "BVC",
	[INSTR_BVS] "BVS",
	[INSTR_CLC] "CLC",
	[INSTR_CLD] "CLD",
	[INSTR_CLI] "CLI",
	[INSTR_CLV] "CLV",
	[INSTR_CMP] "CMP",
	[INSTR_CPX] "CPX",
	[INSTR_CPY] "CPY",
	[INSTR_DEC] "DEC",
	[INSTR_DEX] "DEX",
	[INSTR_DEY] "DEY",
	[INSTR_EOR] "EOR",
	[INSTR_INC] "INC",
	[INSTR_INX] "INX",
	[INSTR_INY] "INY",
	[INSTR_JMP] "JMP",
	[INSTR_JSR] "JSR",
	[INSTR_LDA] "LDA",
	[INSTR_LDX] "LDX",
	[INSTR_LDY] "LDY",
	[INSTR_LSR] "LSR",
	[INSTR_NOP] "NOP",
	[INSTR_ORA] "ORA",
	[INSTR_PHA] "PHA",
	[INSTR_PHP] "PHP",
	[INSTR_PLA] "PLA",
	[INSTR_PLP] "PLP",
	[INSTR_ROL] "ROL",
	[INSTR_ROR] "ROR",
	[INSTR_RTI] "RTI",
	[INSTR_RTS] "RTS",
	[INSTR_SBC] "SBC",
	[INSTR_SEC] "SEC",
	[INSTR_SED] "SED",
	[INSTR_SEI] "SEI",
	[INSTR_STA] "STA",
	[INSTR_STX] "STX",
	[INSTR_STY] "STY",
	[INSTR_TAX] "TAX",
	[INSTR_TAY] "TAY",
	[INSTR_TSX] "TSX",
	[INSTR_TXA] "TXA",
	[INSTR_TXS] "TXS",
	[INSTR_TYA] "TYA",
	[INSTR_XXX] "???"	
};

struct {
	instr_t instr;
	addmode_t addmode;
} instraddmode[256] = {
/* 00 */{ INSTR_BRK, ADDMODE_IMPL },
/* 01 */{ INSTR_ORA, ADDMODE_INDX },
/* 02 */{ INSTR_XXX, ADDMODE_IMPL },
/* 03 */{ INSTR_XXX, ADDMODE_IMPL },
/* 04 */{ INSTR_XXX, ADDMODE_IMPL },
/* 05 */{ INSTR_ORA, ADDMODE_ZP },
/* 06 */{ INSTR_ASL, ADDMODE_ZP },
/* 07 */{ INSTR_XXX, ADDMODE_IMPL },
/* 08 */{ INSTR_PHP, ADDMODE_IMPL },
/* 09 */{ INSTR_ORA, ADDMODE_IMM },
/* 0A */{ INSTR_ASL, ADDMODE_ACC },
/* 0B */{ INSTR_XXX, ADDMODE_IMPL },
/* 0C */{ INSTR_XXX, ADDMODE_IMPL },
/* 0D */{ INSTR_ORA, ADDMODE_ABS },
/* 0E */{ INSTR_ASL, ADDMODE_ABS },
/* 0F */{ INSTR_XXX, ADDMODE_IMPL },
/* 10 */{ INSTR_BPL, ADDMODE_BRA },
/* 11 */{ INSTR_ORA, ADDMODE_INDY },
/* 12 */{ INSTR_XXX, ADDMODE_IMPL },
/* 13 */{ INSTR_XXX, ADDMODE_IMPL },
/* 14 */{ INSTR_XXX, ADDMODE_IMPL },
/* 15 */{ INSTR_ORA, ADDMODE_ZPX },
/* 16 */{ INSTR_ASL, ADDMODE_ZPX },
/* 17 */{ INSTR_XXX, ADDMODE_IMPL },
/* 18 */{ INSTR_CLC, ADDMODE_IMPL },
/* 19 */{ INSTR_ORA, ADDMODE_ABSY },
/* 1A */{ INSTR_XXX, ADDMODE_IMPL },
/* 1B */{ INSTR_XXX, ADDMODE_IMPL },
/* 1C */{ INSTR_XXX, ADDMODE_IMPL },
/* 1D */{ INSTR_ORA, ADDMODE_ABSX },
/* 1E */{ INSTR_ASL, ADDMODE_ABSX },
/* 1F */{ INSTR_XXX, ADDMODE_IMPL },
/* 20 */{ INSTR_JSR, ADDMODE_ABS },
/* 21 */{ INSTR_AND, ADDMODE_INDX },
/* 22 */{ INSTR_XXX, ADDMODE_IMPL },
/* 23 */{ INSTR_XXX, ADDMODE_IMPL },
/* 24 */{ INSTR_BIT, ADDMODE_ZP },
/* 25 */{ INSTR_AND, ADDMODE_ZP },
/* 26 */{ INSTR_ROL, ADDMODE_ZP },
/* 27 */{ INSTR_XXX, ADDMODE_IMPL },
/* 28 */{ INSTR_PLP, ADDMODE_IMPL },
/* 29 */{ INSTR_AND, ADDMODE_IMM },
/* 2A */{ INSTR_ROL, ADDMODE_ACC },
/* 2B */{ INSTR_XXX, ADDMODE_IMPL },
/* 2C */{ INSTR_BIT, ADDMODE_ABS },
/* 2D */{ INSTR_AND, ADDMODE_ABS },
/* 2E */{ INSTR_ROL, ADDMODE_ABS },
/* 2F */{ INSTR_XXX, ADDMODE_IMPL },
/* 30 */{ INSTR_BMI, ADDMODE_BRA },
/* 31 */{ INSTR_AND, ADDMODE_INDY },
/* 32 */{ INSTR_XXX, ADDMODE_IMPL },
/* 33 */{ INSTR_XXX, ADDMODE_IMPL },
/* 34 */{ INSTR_XXX, ADDMODE_IMPL },
/* 35 */{ INSTR_AND, ADDMODE_ZPX },
/* 36 */{ INSTR_ROL, ADDMODE_ZPX },
/* 37 */{ INSTR_XXX, ADDMODE_IMPL },
/* 38 */{ INSTR_SEC, ADDMODE_IMPL },
/* 39 */{ INSTR_AND, ADDMODE_ABSY },
/* 3A */{ INSTR_XXX, ADDMODE_IMPL },
/* 3B */{ INSTR_XXX, ADDMODE_IMPL },
/* 3C */{ INSTR_XXX, ADDMODE_IMPL },
/* 3D */{ INSTR_AND, ADDMODE_ABSX },
/* 3E */{ INSTR_ROL, ADDMODE_ABSX },
/* 3F */{ INSTR_XXX, ADDMODE_IMPL },
/* 40 */{ INSTR_RTI, ADDMODE_IMPL },
/* 41 */{ INSTR_EOR, ADDMODE_INDX },
/* 42 */{ INSTR_XXX, ADDMODE_IMPL },
/* 43 */{ INSTR_XXX, ADDMODE_IMPL },
/* 44 */{ INSTR_XXX, ADDMODE_IMPL },
/* 45 */{ INSTR_EOR, ADDMODE_ZP },
/* 46 */{ INSTR_LSR, ADDMODE_ZP },
/* 47 */{ INSTR_XXX, ADDMODE_IMPL },
/* 48 */{ INSTR_PHA, ADDMODE_IMPL },
/* 49 */{ INSTR_EOR, ADDMODE_IMM },
/* 4A */{ INSTR_LSR, ADDMODE_ACC },
/* 4B */{ INSTR_XXX, ADDMODE_IMPL },
/* 4C */{ INSTR_JMP, ADDMODE_ABS },
/* 4D */{ INSTR_EOR, ADDMODE_ABS },
/* 4E */{ INSTR_LSR, ADDMODE_ABS },
/* 4F */{ INSTR_XXX, ADDMODE_IMPL },
/* 50 */{ INSTR_BVC, ADDMODE_BRA },
/* 51 */{ INSTR_EOR, ADDMODE_INDY },
/* 52 */{ INSTR_XXX, ADDMODE_IMPL },
/* 53 */{ INSTR_XXX, ADDMODE_IMPL },
/* 54 */{ INSTR_XXX, ADDMODE_IMPL },
/* 55 */{ INSTR_EOR, ADDMODE_ZPX },
/* 56 */{ INSTR_LSR, ADDMODE_ZPX },
/* 57 */{ INSTR_XXX, ADDMODE_IMPL },
/* 58 */{ INSTR_CLI, ADDMODE_IMPL },
/* 59 */{ INSTR_EOR, ADDMODE_ABSY },
/* 5A */{ INSTR_XXX, ADDMODE_IMPL },
/* 5B */{ INSTR_XXX, ADDMODE_IMPL },
/* 5C */{ INSTR_XXX, ADDMODE_IMPL },
/* 5D */{ INSTR_EOR, ADDMODE_ABSX },
/* 5E */{ INSTR_LSR, ADDMODE_ABSX },
/* 5F */{ INSTR_XXX, ADDMODE_IMPL },
/* 60 */{ INSTR_RTS, ADDMODE_IMPL },
/* 61 */{ INSTR_ADC, ADDMODE_INDX },
/* 62 */{ INSTR_XXX, ADDMODE_IMPL },
/* 63 */{ INSTR_XXX, ADDMODE_IMPL },
/* 64 */{ INSTR_XXX, ADDMODE_IMPL },
/* 65 */{ INSTR_ADC, ADDMODE_ZP },
/* 66 */{ INSTR_ROR, ADDMODE_ZP },
/* 67 */{ INSTR_XXX, ADDMODE_IMPL },
/* 68 */{ INSTR_PLA, ADDMODE_IMPL },
/* 69 */{ INSTR_ADC, ADDMODE_IMM },
/* 6A */{ INSTR_ROR, ADDMODE_ACC },
/* 6B */{ INSTR_XXX, ADDMODE_IMPL },
/* 6C */{ INSTR_JMP, ADDMODE_IND },
/* 6D */{ INSTR_ADC, ADDMODE_ABS },
/* 6E */{ INSTR_ROR, ADDMODE_ABS },
/* 6F */{ INSTR_XXX, ADDMODE_IMPL },
/* 70 */{ INSTR_BVS, ADDMODE_BRA },
/* 71 */{ INSTR_ADC, ADDMODE_INDY },
/* 72 */{ INSTR_XXX, ADDMODE_IMPL },
/* 73 */{ INSTR_XXX, ADDMODE_IMPL },
/* 74 */{ INSTR_XXX, ADDMODE_IMPL },
/* 75 */{ INSTR_ADC, ADDMODE_ZPX },
/* 76 */{ INSTR_ROR, ADDMODE_ZPX },
/* 77 */{ INSTR_XXX, ADDMODE_IMPL },
/* 78 */{ INSTR_SEI, ADDMODE_IMPL },
/* 79 */{ INSTR_ADC, ADDMODE_ABSY },
/* 7A */{ INSTR_XXX, ADDMODE_IMPL },
/* 7B */{ INSTR_XXX, ADDMODE_IMPL },
/* 7C */{ INSTR_XXX, ADDMODE_IMPL },
/* 7D */{ INSTR_ADC, ADDMODE_ABSX },
/* 7E */{ INSTR_ROR, ADDMODE_ABSX },
/* 7F */{ INSTR_XXX, ADDMODE_IMPL },
/* 80 */{ INSTR_XXX, ADDMODE_IMPL },
/* 81 */{ INSTR_STA, ADDMODE_INDX },
/* 82 */{ INSTR_XXX, ADDMODE_IMPL },
/* 83 */{ INSTR_XXX, ADDMODE_IMPL },
/* 84 */{ INSTR_STY, ADDMODE_ZP },
/* 85 */{ INSTR_STA, ADDMODE_ZP },
/* 86 */{ INSTR_STX, ADDMODE_ZP },
/* 87 */{ INSTR_XXX, ADDMODE_IMPL },
/* 88 */{ INSTR_DEY, ADDMODE_IMPL },
/* 89 */{ INSTR_XXX, ADDMODE_IMPL },
/* 8A */{ INSTR_TXA, ADDMODE_IMPL },
/* 8B */{ INSTR_XXX, ADDMODE_IMPL },
/* 8C */{ INSTR_STY, ADDMODE_ABS },
/* 8D */{ INSTR_STA, ADDMODE_ABS },
/* 8E */{ INSTR_STX, ADDMODE_ABS },
/* 8F */{ INSTR_XXX, ADDMODE_IMPL },
/* 90 */{ INSTR_BCC, ADDMODE_BRA },
/* 91 */{ INSTR_STA, ADDMODE_INDY },
/* 92 */{ INSTR_XXX, ADDMODE_IMPL },
/* 93 */{ INSTR_XXX, ADDMODE_IMPL },
/* 94 */{ INSTR_STY, ADDMODE_ZPX },
/* 95 */{ INSTR_STA, ADDMODE_ZPX },
/* 96 */{ INSTR_STX, ADDMODE_ZPY },
/* 97 */{ INSTR_XXX, ADDMODE_IMPL },
/* 98 */{ INSTR_TYA, ADDMODE_IMPL },
/* 99 */{ INSTR_STA, ADDMODE_ABSY },
/* 9A */{ INSTR_TXS, ADDMODE_IMPL },
/* 9B */{ INSTR_XXX, ADDMODE_IMPL },
/* 9C */{ INSTR_XXX, ADDMODE_IMPL },
/* 9D */{ INSTR_STA, ADDMODE_ABSX },
/* 9E */{ INSTR_XXX, ADDMODE_IMPL },
/* 9F */{ INSTR_XXX, ADDMODE_IMPL },
/* A0 */{ INSTR_LDY, ADDMODE_IMM },
/* A1 */{ INSTR_LDA, ADDMODE_INDX },
/* A2 */{ INSTR_LDX, ADDMODE_IMM },
/* A3 */{ INSTR_XXX, ADDMODE_IMPL },
/* A4 */{ INSTR_LDY, ADDMODE_ZP },
/* A5 */{ INSTR_LDA, ADDMODE_ZP },
/* A6 */{ INSTR_LDX, ADDMODE_ZP },
/* A7 */{ INSTR_XXX, ADDMODE_IMPL },
/* A8 */{ INSTR_TAY, ADDMODE_IMPL },
/* A9 */{ INSTR_LDA, ADDMODE_IMM },
/* AA */{ INSTR_TAX, ADDMODE_IMPL },
/* AB */{ INSTR_XXX, ADDMODE_IMPL },
/* AC */{ INSTR_LDY, ADDMODE_ABS },
/* AD */{ INSTR_LDA, ADDMODE_ABS },
/* AE */{ INSTR_LDX, ADDMODE_ABS },
/* AF */{ INSTR_XXX, ADDMODE_IMPL },
/* B0 */{ INSTR_BCS, ADDMODE_BRA },
/* B1 */{ INSTR_LDA, ADDMODE_INDY },
/* B2 */{ INSTR_XXX, ADDMODE_IMPL },
/* B3 */{ INSTR_XXX, ADDMODE_IMPL },
/* B4 */{ INSTR_LDY, ADDMODE_ZPX },
/* B5 */{ INSTR_LDA, ADDMODE_ZPX },
/* B6 */{ INSTR_LDX, ADDMODE_ZPY },
/* B7 */{ INSTR_XXX, ADDMODE_IMPL },
/* B8 */{ INSTR_CLV, ADDMODE_IMPL },
/* B9 */{ INSTR_LDA, ADDMODE_ABSY },
/* BA */{ INSTR_TSX, ADDMODE_IMPL },
/* BB */{ INSTR_XXX, ADDMODE_IMPL },
/* BC */{ INSTR_LDY, ADDMODE_ABSX },
/* BD */{ INSTR_LDA, ADDMODE_ABSX },
/* BE */{ INSTR_LDX, ADDMODE_ABSY },
/* BF */{ INSTR_XXX, ADDMODE_IMPL },
/* C0 */{ INSTR_CPY, ADDMODE_IMM },
/* C1 */{ INSTR_CMP, ADDMODE_INDX },
/* C2 */{ INSTR_XXX, ADDMODE_IMPL },
/* C3 */{ INSTR_XXX, ADDMODE_IMPL },
/* C4 */{ INSTR_CPY, ADDMODE_ZP },
/* C5 */{ INSTR_CMP, ADDMODE_ZP },
/* C6 */{ INSTR_DEC, ADDMODE_ZP },
/* C7 */{ INSTR_XXX, ADDMODE_IMPL },
/* C8 */{ INSTR_INY, ADDMODE_IMPL },
/* C9 */{ INSTR_CMP, ADDMODE_IMM },
/* CA */{ INSTR_DEX, ADDMODE_IMPL },
/* CB */{ INSTR_XXX, ADDMODE_IMPL },
/* CC */{ INSTR_CPY, ADDMODE_ABS },
/* CD */{ INSTR_CMP, ADDMODE_ABS },
/* CE */{ INSTR_DEC, ADDMODE_ABS },
/* CF */{ INSTR_XXX, ADDMODE_IMPL },
/* D0 */{ INSTR_BNE, ADDMODE_BRA },
/* D1 */{ INSTR_CMP, ADDMODE_INDY },
/* D2 */{ INSTR_XXX, ADDMODE_IMPL },
/* D3 */{ INSTR_XXX, ADDMODE_IMPL },
/* D4 */{ INSTR_XXX, ADDMODE_IMPL },
/* D5 */{ INSTR_CMP, ADDMODE_ZPX },
/* D6 */{ INSTR_DEC, ADDMODE_ZPX },
/* D7 */{ INSTR_XXX, ADDMODE_IMPL },
/* D8 */{ INSTR_CLD, ADDMODE_IMPL },
/* D9 */{ INSTR_CMP, ADDMODE_ABSY },
/* DA */{ INSTR_XXX, ADDMODE_IMPL },
/* DB */{ INSTR_XXX, ADDMODE_IMPL },
/* DC */{ INSTR_XXX, ADDMODE_IMPL },
/* DD */{ INSTR_CMP, ADDMODE_ABSX },
/* DE */{ INSTR_DEC, ADDMODE_ABSX },
/* DF */{ INSTR_XXX, ADDMODE_IMPL },
/* E0 */{ INSTR_CPX, ADDMODE_IMM },
/* E1 */{ INSTR_SBC, ADDMODE_INDX },
/* E2 */{ INSTR_XXX, ADDMODE_IMPL },
/* E3 */{ INSTR_XXX, ADDMODE_IMPL },
/* E4 */{ INSTR_CPX, ADDMODE_ZP },
/* E5 */{ INSTR_SBC, ADDMODE_ZP },
/* E6 */{ INSTR_INC, ADDMODE_ZP },
/* E7 */{ INSTR_XXX, ADDMODE_IMPL },
/* E8 */{ INSTR_INX, ADDMODE_IMPL },
/* E9 */{ INSTR_SBC, ADDMODE_IMM },
/* EA */{ INSTR_NOP, ADDMODE_IMPL },
/* EB */{ INSTR_XXX, ADDMODE_IMPL },
/* EC */{ INSTR_CPX, ADDMODE_ABS },
/* ED */{ INSTR_SBC, ADDMODE_ABS },
/* EE */{ INSTR_INC, ADDMODE_ABS },
/* EF */{ INSTR_XXX, ADDMODE_IMPL },
/* F0 */{ INSTR_BEQ, ADDMODE_BRA },
/* F1 */{ INSTR_SBC, ADDMODE_INDY },
/* F2 */{ INSTR_XXX, ADDMODE_IMPL },
/* F3 */{ INSTR_XXX, ADDMODE_IMPL },
/* F4 */{ INSTR_XXX, ADDMODE_IMPL },
/* F5 */{ INSTR_SBC, ADDMODE_ZPX },
/* F6 */{ INSTR_INC, ADDMODE_ZPX },
/* F7 */{ INSTR_XXX, ADDMODE_IMPL },
/* F8 */{ INSTR_SED, ADDMODE_IMPL },
/* F9 */{ INSTR_SBC, ADDMODE_ABSY },
/* FA */{ INSTR_XXX, ADDMODE_IMPL },
/* FB */{ INSTR_XXX, ADDMODE_IMPL },
/* FC */{ INSTR_XXX, ADDMODE_IMPL },
/* FD */{ INSTR_SBC, ADDMODE_ABSX },
/* FE */{ INSTR_INC, ADDMODE_ABSX },
/* FF */{ INSTR_XXX, ADDMODE_IMPL }
};

uint8_t RAM[65536];
uint8_t type[65536];

#define MAX_LINE 80
char line[MAX_LINE];

char *disasm_instr(uint16_t pc) {
	uint8_t opcode = RAM[pc];
	char line2[MAX_LINE] = "";

	switch (instraddmode[opcode].addmode) {
		case ADDMODE_ABS:
			snprintf(line2, MAX_LINE, "$%04X", RAM[pc+1] | RAM[pc+2]<<8);
			break;
		case ADDMODE_ABSX:
			snprintf(line2, MAX_LINE, "$%04X,X", RAM[pc+1] | RAM[pc+2]<<8);
			break;
		case ADDMODE_ABSY:
			snprintf(line2, MAX_LINE, "$%04X,Y", RAM[pc+1] | RAM[pc+2]<<8);
			break;
		case ADDMODE_ACC:
			break;
		case ADDMODE_BRA:
			snprintf(line2, MAX_LINE, "$%02X", pc+2 + (int8_t)RAM[pc+1]);
			break;
		case ADDMODE_IMM:
			snprintf(line2, MAX_LINE, "#$%02X", RAM[pc+1]);
			break;
		case ADDMODE_IMPL:
			break;
		case ADDMODE_IND:
			snprintf(line2, MAX_LINE, "($%04X)", RAM[pc+1] | RAM[pc+2]<<8);
			break;
		case ADDMODE_INDX:
			snprintf(line2, MAX_LINE, "($%02X,X)", RAM[pc+1]);
			break;
		case ADDMODE_INDY:
			snprintf(line2, MAX_LINE, "($%02X),Y", RAM[pc+1]);
			break;
		case ADDMODE_ZP:
			snprintf(line2, MAX_LINE, "$%02X", RAM[pc+1]);
			break;
		case ADDMODE_ZPX:
			snprintf(line2, MAX_LINE, "$%02X,X", RAM[pc+1]);
			break;
		case ADDMODE_ZPY:
			snprintf(line2, MAX_LINE, "$%02X,Y", RAM[pc+1]);
			break;
	}
	snprintf(line, MAX_LINE, "%s %s", mnemo[instraddmode[opcode].instr], line2);
	return line;
}

int recompile_instr(uint16_t pc) {
	uint8_t opcode = RAM[pc];
	#define MAX_OPERAND 80
	char operand[MAX_OPERAND];
	int step1 = 0;

//	printf("%s ", mnemo[instraddmode[opcode].instr]);
	switch (instraddmode[opcode].addmode) {
		case ADDMODE_ABS:
			snprintf(operand, MAX_OPERAND, "RAM[0x%04X]", RAM[pc+1] | RAM[pc+2]<<8);
			break;
		case ADDMODE_ABSX:
			snprintf(operand, MAX_OPERAND, "RAM[0x%04X + X]", RAM[pc+1] | RAM[pc+2]<<8);
			break;
		case ADDMODE_ABSY:
			snprintf(operand, MAX_OPERAND, "RAM[0x%04X + Y]", RAM[pc+1] | RAM[pc+2]<<8);
			break;
		case ADDMODE_ACC:
			break;
		case ADDMODE_BRA:
			snprintf(operand, MAX_OPERAND, "l%04X", pc+2 + (int8_t)RAM[pc+1]);
			break;
		case ADDMODE_IMM:
			snprintf(operand, MAX_OPERAND, "0x%02X", RAM[pc+1]);
			break;
		case ADDMODE_IMPL:
			break;
		case ADDMODE_IND:
			snprintf(operand, MAX_OPERAND, "ERROR");
			break;
		case ADDMODE_INDX:
			snprintf(operand, MAX_OPERAND, "RAM[RAM[(0x%02X + X) & 0xFF] | RAM[(0x%02X + X + 1) & 0xFF]<<8]", RAM[pc+1]);
			break;
		case ADDMODE_INDY:
			snprintf(operand, MAX_OPERAND, "RAM[(RAM[(0x%02X) & 0xFF] | RAM[(0x%02X + 1) & 0xFF]<<8) + Y]", RAM[pc+1]);
			break;
		case ADDMODE_ZP:
			snprintf(operand, MAX_OPERAND, "RAM[0x%02X]", RAM[pc+1]);
			break;
		case ADDMODE_ZPX:
			snprintf(operand, MAX_OPERAND, "RAM[(0x%02X + X) & 0xFF]", RAM[pc+1]);
			break;
		case ADDMODE_ZPY:
			snprintf(operand, MAX_OPERAND, "RAM[(0x%02X + Y) & 0xFF]", RAM[pc+1]);
			break;
	}

//	printf("\naddmode = %i\n", instraddmode[opcode].addmode);
	switch (instraddmode[opcode].instr) {
		case INSTR_ADC:
			printf("A += %s + C", operand);
			break;
		case INSTR_AND:
			printf("A &= %s", operand);
			break;
		case INSTR_ASL:
			printf("printf(\"??? at $%04X\\n\"); return", pc);
			break;
		case INSTR_BCC:
			printf("if (!C) goto %s", operand);
			break;
		case INSTR_BCS:
			printf("if (C) goto %s", operand);
			break;
		case INSTR_BEQ:
			printf("if (Z) goto %s", operand);
			break;
		case INSTR_BIT:
			printf("printf(\"??? at $%04X\\n\"); return", pc);
			if (type[pc+1] & TYPE_CODE_TARGET) {	/* this is a "SKP", not a "BIT" */
				uint16_t next = pc + length[instraddmode[opcode].addmode] + 1;
				printf("; goto l%04X;\n", next);	/* skip the next instruction */
				type[next] |= TYPE_CODE_TARGET;		/* next instruction need label */
				step1 = 1;
			}
			break;
		case INSTR_BMI:
			printf("if (N) goto %s", operand);
			break;
		case INSTR_BNE:
			printf("if (!Z) goto %s", operand);
			break;
		case INSTR_BPL:
			printf("if (!N) goto %s", operand);
			break;
		case INSTR_BRK:
			printf("printf(\"??? at $%04X\\n\"); return", pc);
			break;
		case INSTR_BVC:
			printf("if (!V) goto %s", operand);
			break;
		case INSTR_BVS:
			printf("if (V) goto %s", operand);
			break;
		case INSTR_CLC:
			printf("C = 0");
			break;
		case INSTR_CLD:
			printf("D = 0");
			break;
		case INSTR_CLI:
			printf("I = 0");
			break;
		case INSTR_CLV:
			printf("V = 0");
			break;
		case INSTR_CMP:
			printf("printf(\"??? at $%04X\\n\"); return", pc);
			break;
		case INSTR_CPX:
			printf("printf(\"??? at $%04X\\n\"); return", pc);
			break;
		case INSTR_CPY:
			printf("printf(\"??? at $%04X\\n\"); return", pc);
			break;
		case INSTR_DEC:
			printf("%s--; SETSZ(%s)", operand, operand);
			break;
		case INSTR_DEX:
			printf("X--; SETSZ(X)");
			break;
		case INSTR_DEY:
			printf("Y--; SETSZ(Y)");
			break;
		case INSTR_EOR:
			printf("A ^= %s", operand);
			break;
		case INSTR_INC:
			printf("%s++; ; SETSZ(%s)", operand, operand);
			break;
		case INSTR_INX:
			printf("X--; SETSZ(X)");
			break;
		case INSTR_INY:
			printf("Y--; SETSZ(Y)");
			break;
		case INSTR_JMP:
			printf("goto l%04X", RAM[pc+1] | RAM[pc+2]<<8); /* special case */
			break;
		case INSTR_JSR:
			printf("RAM[0x0100+S--] = 0x%02X; ", (pc+2)>>8);
			printf("RAM[0x0100+S--] = 0x%02X; ", (pc+2)&0xFF);
			printf("goto l%04X", RAM[pc+1] | RAM[pc+2]<<8); /* special case */
			break;
		case INSTR_LDA:
			printf("A = %s", operand);
			break;
		case INSTR_LDX:
			printf("X = %s", operand);
			break;
		case INSTR_LDY:
			printf("Y = %s", operand);
			break;
		case INSTR_LSR:
			printf("printf(\"??? at $%04X\\n\"); return", pc);
			break;
		case INSTR_NOP:
			break;
		case INSTR_ORA:
			printf("A |= %s", operand);
			break;
		case INSTR_PHA:
			printf("RAM[0x0100+S--] = A", operand);
			break;
		case INSTR_PHP:
			printf("P = N << 8 | V << 7 | B << 5 | D << 4 | I << 3 | Z << 2 | C << 1; ");
			printf("RAM[0x0100+S--] = P", operand);
			break;
		case INSTR_PLA:
			printf("A = RAM[0x0100+(++S)]", operand);
			break;
		case INSTR_PLP:
			printf("P = RAM[0x0100+(++S)]; ", operand);
			printf("N = P&(1<<8)? 1: 0;");
			printf("V = P&(1<<7)? 1: 0;");
			printf("B = P&(1<<5)? 1: 0;");
			printf("D = P&(1<<4)? 1: 0;");
			printf("I = P&(1<<3)? 1: 0;");
			printf("Z = P&(1<<2)? 1: 0;");
			printf("C = P&(1<<1)? 1: 0");
			break;
		case INSTR_ROL:
			printf("printf(\"??? at $%04X\\n\"); return", pc);
			break;
		case INSTR_ROR:
			printf("printf(\"??? at $%04X\\n\"); return", pc);
			break;
		case INSTR_RTI:
			printf("printf(\"??? at $%04X\\n\"); return", pc);
			break;
		case INSTR_RTS:
			printf("PC = RAM[0x0100+(++S)]; ");
			printf("PC = PC + (RAM[0x0100+(++S)]<<8) + 1; ");
			printf("goto RTS_SWITCH", pc);
			break;
		case INSTR_SBC:
			printf("A -= %s + (1-C)", operand);
			break;
		case INSTR_SEC:
			printf("C = 1");
			break;
		case INSTR_SED:
			printf("D = 1");
			break;
		case INSTR_SEI:
			printf("I = 1");
			break;
		case INSTR_STA:
			printf("%s = A", operand);
			break;
		case INSTR_STX:
			printf("%s = X", operand);
			break;
		case INSTR_STY:
			printf("%s = Y", operand);
			break;
		case INSTR_TAX:
			printf("X = A");
			break;
		case INSTR_TAY:
			printf("Y = A");
			break;
		case INSTR_TSX:
			printf("X = S");
			break;
		case INSTR_TXA:
			printf("A = X");
			break;
		case INSTR_TXS:
			printf("S = X");
			break;
		case INSTR_TYA:
			printf("A = Y");
			break;
		case INSTR_XXX:
			printf("printf(\"??? at $%04X\\n\"); return", pc);
			break;
	}
	printf(";");
#ifdef DEBUG
	printf("PC_DEBUG = 0x%04X; DEBUG;", pc);
#endif
	return step1;
}

void disasm(uint16_t pc) {
	uint16_t opcode;
	int i;
	char *l;

	opcode = RAM[pc];
	printf(".,%04X ", pc);
	for (i=0; i<=length[instraddmode[opcode].addmode]; i++) {
		printf("%02X ", RAM[pc+i]);
	}
	for (i=0; i<=5-3*length[instraddmode[opcode].addmode]; i++) {
		printf(" ");
	}
	l = disasm_instr(pc);
	printf("%s\n", l);
}

int recompile(uint16_t pc) {
	uint16_t opcode;
	int i;
	char *l;
	int step1;

	opcode = RAM[pc];
//	printf(".,%04X ", pc);
//	for (i=0; i<=length[instraddmode[opcode].addmode]; i++) {
//		printf("%02X ", RAM[pc+i]);
//	}
//	for (i=0; i<=5-3*length[instraddmode[opcode].addmode]; i++) {
//		printf(" ");
//	}
	l = disasm_instr(pc);
	printf("/* %s ", l);
	for (i=0; i<11-strlen(line); i++)
		printf(" ");
	printf("*/ ");
	step1 = recompile_instr(pc);
//printf("/* before1 = %04x*/\n", pc);
	printf("\n");
	return step1;
}

void tag_text_data_recursive(uint16_t pc, int level) {
	uint8_t opcode;
	uint16_t dest;
	int i;
	int type_old;

	type_old = type[pc];
//	printf("setting type[%04X]\n", pc);
	type[pc] |= TYPE_CODE_TARGET;

	if (type_old & TYPE_CODE)
		return;

	while(1) {
#ifdef VERBOSE
		for (i=0; i<level; i++)
			printf(" ");
		disasm(pc);
#endif
//printf("type[%04X] = %d\n", pc, type[pc]);
//printf("type[0xA644] = %d\n", type[0xA644]);
		if (type[pc] & TYPE_CODE)
			return;
		type[pc] |= TYPE_CODE;

		if (pc >= 0xE4B7)
			printf("// Warning: KERNAL call to $%04X\n", pc);

		opcode = RAM[pc];
		switch (instraddmode[opcode].instr) {
			case INSTR_BRK:
				printf("// Warning: BRK at $%04X\n", pc);
				return;
			case INSTR_RTS:
				return;
			case INSTR_JMP:
				switch (instraddmode[opcode].addmode) {
					case ADDMODE_ABS:
						tag_text_data_recursive(RAM[pc+1] | RAM[pc+2]<<8, level+1);
						return;
					case ADDMODE_IND:
						dest = RAM[pc+1] | RAM[pc+2]<<8, pc;
						printf("// Warning: JMP ($%04X) at $%04X\n", RAM[pc+1] | RAM[pc+2]<<8, pc);
						if (!(dest&1) && (dest>=0x300) && (dest<=0x30A)) {
							/* CBM BASIC vector table */
							printf("//  Using CBM BASIC vector table...\n");
							dest = dest + 0xE447 - 0x300;
							tag_text_data_recursive(RAM[dest] | RAM[dest+1]<<8, level+1);
						}
						return;
					default:
						printf("Table error #1\n");
						exit(1);
				}
				break;
			case INSTR_JSR:
//				printf("setting type[%04X] (previously %d)\n", pc+3, type[pc+3]);
				type[pc+3] |= TYPE_AFTER_JSR; /* next instruction needs a label */
				tag_text_data_recursive(RAM[pc+1] | RAM[pc+2]<<8, level+1);
				break;
			case INSTR_BCC:
			case INSTR_BCS:
			case INSTR_BEQ:
			case INSTR_BMI:
			case INSTR_BNE:
			case INSTR_BPL:
			case INSTR_BVC:
			case INSTR_BVS:
//				printf("branch!\n");
				tag_text_data_recursive(pc+2 + (int8_t)RAM[pc+1], level+1);
				break;
		}
		pc += length[instraddmode[opcode].addmode] + 1;
	}
}

void recompile_all(uint16_t start, uint16_t end, uint16_t entry) {
	int step1;
	uint16_t pc = start;

	printf("#include <stdio.h>\n");
	printf("int main() {\n");
	printf("unsigned char A, X, Y, S = 0xFF, P;\n");
	printf("unsigned short PC;\n");
	printf("unsigned char RAM[65536];\n");
	printf("int N=0, V=0, B=0, D=0, I=0, Z=0, C=0;\n");
	printf("goto l%04X;\n", entry);
	printf("#include \"kernal.h\"\n");

	while (pc<end) {
printf("/*l%04X: %d*/ \n", pc, type[pc]);
		if (type[pc] & (TYPE_CODE_TARGET|TYPE_AFTER_JSR))
			printf("l%04X:\n", pc);
		if (type[pc] & (TYPE_CODE|TYPE_CODE_TARGET)) {
			step1 = recompile(pc);
			if (step1)
				pc++;
			else
				pc = pc + length[instraddmode[RAM[pc]].addmode] + 1;
		} else {
			pc++;
		}
	}

/* jump table */
	printf("RTS_SWITCH:\n");
	printf("switch (PC) {\n");
	for (pc = start; pc<end; pc++) {
		if (type[pc] & (TYPE_AFTER_JSR)) {
			printf("case 0x%04X:\n", pc);
			printf("printf(\"goto l%04X\\n\");\n", pc);
			printf(" goto l%04X;\n", pc);
		}
	}
	printf("default:\n", pc);
	printf("printf(\"goto %s not found!\\n\", PC); return;\n", "l%04X");
	printf("}\n");
	
	printf("return 0;\n");
	printf("}\n");
}

void tag_text_data(uint16_t pc) {
	uint8_t opcode;
	int i;

	for (i=0; i<sizeof(type); i++)
		type[i] = TYPE_UNKNOWN;

	tag_text_data_recursive(pc, 0);
}

int main(int argc, char **argv) {
	FILE *f;
	uint16_t start;

	if (argc<2) {
		printf("Usage: %s filename\n", argv[0]);
		return 0;
	}

	if (!(f = fopen(argv[1], "r"))) {
		printf("Could not open %s!\n", argv[1]);
		return 2;
	}
//	start = ((unsigned char)fgetc(f)) | ((unsigned char)fgetc(f))<<8;
//	printf("start: 0x%04x\n", start);
	start = 0xA000;
	fread(&RAM[start], 65536-start, 1, f);

	tag_text_data(0xE394);

/*
	printf("----------------------------------------------------------------------");
	printf("----------------------------------------------------------------------");
	printf("----------------------------------------------------------------------");
	printf("----------------------------------------------------------------------");
	printf("----------------------------------------------------------------------");
	printf("----------------------------------------------------------------------");
	printf("----------------------------------------------------------------------");
	printf("----------------------------------------------------------------------");
	printf("----------------------------------------------------------------------");
	printf("----------------------------------------------------------------------");
*/

	recompile_all(0xA000, 0xE4B7, 0xE394);
	return 0;
}